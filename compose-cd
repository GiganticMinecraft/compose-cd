#!/bin/bash

source config.env

#function docker-compose(){
#	local p=`pwd`
#	echo "[compose-mock]:$p $1 $2"
#}

function install(){
	echo install
}

function uninstall(){
	echo uninstall
}

function notify_discord(){
	local webhook=$1
	local msg="$2"
	curl -H "Accept: application/json" -H "Content-type: application/json" -X POST \
			-d '{"username":"kuso","content":'"\"$msg\"}" "$webhook"
}

function notify(){
	local msg="[${project}] $1"
	echo "$msg"
	notify_discord "${DISCORD_WEBHOOK}" "$msg"
}

function load_config(){
	echo -n "[$proj:load config] "
	if [ ! -e ./.compose-cd ]; then
		echo "config file not found"
		return
	fi
	source ./.compose-cd # super config system
	echo "ok"
}

function service_up(){
	notify "starting service..."
	docker-compose up -d 2> /dev/null
	notify "service is up!"
}

function service_down(){
	docker-compose down 2> /dev/null
	notify "service is down"
}

function check_repo(){
	echo check repo
}

function get_remote_image(){
	local registry=$1
	local image=$2
	local tag=$3

	curl --silent \
		--header "accept: application/vnd.docker.distribution.manifest.v2+json" \
		--header "authorization: bearer" \
		"https://${registry}/v2/${image}/manifests/${tag}" \
		| jq -r '.config.digest'
}

function update_repo(){
	echo -n "[$project:update repository] "

	local branch=$(git symbolic-ref --short HEAD)
	local local_commit=$(git rev-parse HEAD)
	local remote_commit=$(git ls-remote origin ${branch} | awk '{print $1}')

	if [[ $local_commit = $remote_commit ]]; then
		# no update
		echo "pass"
		return
	fi

	echo "local(${local_commit}) -> remote(${remote_commit})"
	echo "pulling repository..."
	git pull origin "$branch"
}

function update_image(){
	echo -n "[$project:update image] "

	local img_location="${REGISTRY}/${IMAGE}"   # like ghcr.io/sksat/kuso-subdomain-adder
	local img_tag="${VERSION}"

	local local_img=$(docker images --no-trunc --digests "${img_location}" --format '{{.Tag}} {{.ID}}' | grep "$img_tag")
	local remote_img=$(get_remote_image "${REGISTRY}" "${IMAGE}" "${img_tag}")

	if [[ $local_img = $remote_img ]]; then
		# no update
		echo "pass"
		return
	fi

	echo "start"
	docker-compose pull
	echo "[$project:update image] done"
}

function project_update(){
	local proj=$1

	load_config

	update_repo
	update_image

	# todo: no update
	# todo: running check

	echo "restart service..."
	service_down
	service_up
}

function project_status(){
	local proj=$1

	echo -n "[$proj:status] "
	local services=$(docker-compose ps -q)
	if [ -n "$services" ]; then
		echo "up"
	else
		echo "down"
	fi
}

function foreach_project(){
	# TODO: default root
	local SEARCH_ROOT=.

	local cfgs=$(find ${SEARCH_ROOT} -maxdepth 5 -type f -name '.compose-cd')
	for c in $cfgs; do
		local proj=$(dirname "$c")
		project=$proj

		# execute in subshell
		(
			cd "$proj"
			eval "$1 $proj"
		)
	done
}

function check_status(){
	echo "check status"
	foreach_project project_status
}

function update(){
	foreach_project project_update
}

check_status
update

case $1 in
	"install") install ;;
	"uninstall") uninstall ;;
	"status") check_status ;;
	"update") update ;;
esac
